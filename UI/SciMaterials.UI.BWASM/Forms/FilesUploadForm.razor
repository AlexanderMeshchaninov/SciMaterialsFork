@page "/upload_files"
@using SciMaterials.UI.BWASM.States.FileUpload
@using SciMaterials.UI.BWASM.States.Categories
@using SciMaterials.UI.BWASM.States.Authors
@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<FilesContentTypesFilterState> ContentTypesState
@inject IDialogService DialogService

<h3>FilesUploadForm</h3>

<MudIconButton Variant="Variant.Filled" Href="files_storage" Size="Size.Medium" Icon="@Icons.Material.Filled.Close"/>
		
<MudForm Model="@_formModel" @bind-IsValid="@_fileDetailsFormFilledCorrectly" @bind-Errors="@_fileDetailsFormError">
	<MudTextField T="string" Label="Short info"
	              @bind-Value="@_formModel.ShortInfo"
	              Required="true" RequiredError="You must provide some information to identify file!'"/>

	<MudStack Row="true">
		<MudText>Category:</MudText>
		<MudText>@_formModel.Category.Name</MudText>
		<MudButton OnClick="ChangeFormFileCategory">Change</MudButton>
	</MudStack>
			
	<MudStack Row="true">
		<MudText>Author:</MudText>
		<MudText>@_formModel.Author.FirstName</MudText>
		<MudButton OnClick="ChangeFormFileAuthor">Change</MudButton>
	</MudStack>

	<div>
		<InputFile id="fileInput" hidden OnChange="OnFilesListChange" accept="@ContentTypesState.Value.Filter" multiple />
		<MudButton HtmlTag="label" for="fileInput" Variant="Variant.Filled" Size="Size.Small">Add more</MudButton>
	</div>

	<TableView TItem="FileData" Data="_files">
		<TableHeader>
			<MudTh>Name</MudTh>
			<MudTh>Size</MudTh>
			<MudTh></MudTh>
		</TableHeader>

		<RowTemplate>
			<MudTd DataLabel="Name">@context.FileName</MudTd>
			<MudTd DataLabel="Size">@context.Size</MudTd>

			<MudTh>
				<MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="() => Delete(context)">Delete</MudButton>
			</MudTh>
		</RowTemplate>
	</TableView>
			
	<MudButton OnClick="ScheduleUpload">Upload</MudButton>
</MudForm>


@code {
	private UploadFilesMetadataForm _formModel = UploadFilesMetadataForm.Empty;

	private List<FileData> _files = new();

	private string[] _fileDetailsFormError = { };

	private bool _fileDetailsFormFilledCorrectly;

	private void ScheduleUpload()
	{
		var toUpload = _files.ToList();
		//Dispatcher.Dispatch(new ScheduleFilesUpload(toUpload));
	}

	private void OnFilesListChange(InputFileChangeEventArgs e)
	{
		if (e.FileCount <= 0) return;

		Dispatcher.Dispatch(new RegisterMultipleFilesUpload(e.GetMultipleFiles()));
	}

	private async Task ChangeFormFileCategory()
	{
		if (await Select<FilesCategoriesSelector, TreeFileCategory>() is not {} selected) return;

		_formModel.Category = new(selected.Id, selected.Name);
	}

	private async Task ChangeFormFileAuthor()
	{
		if (await Select<AuthorSelector, AuthorState>() is not { } selected) return;

		_formModel.Author = new(selected.Id, selected.Name, string.Empty);
	}

	private void Delete(FileData context)
	{
		_files.Remove(context);
	}

	private async Task<TItem?> Select<TSelectDialog, TItem>() where TSelectDialog : ComponentBase
	{
		var reference = DialogService.Show<TSelectDialog>();
		var result = await reference.Result;
		return result.Cancelled || result.Data is not TItem data ? default : data;
	}

	record FileData(IBrowserFile BrowserFile)
	{
		public string FileName { get; set; } = BrowserFile.Name;
		public string ContentType { get; init; } = BrowserFile.ContentType;
		public long Size { get; init; } = BrowserFile.Size;
	}
}
