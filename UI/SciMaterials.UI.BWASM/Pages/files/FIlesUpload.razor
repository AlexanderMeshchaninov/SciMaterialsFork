@page "/files_upload"

@using SciMaterials.UI.BWASM.States.FileUpload

@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<FilesUploadState> State

<MudDrawerContainer>
	<MudDrawer @bind-Open="@_openFileDetails" Width="300px" Anchor="Anchor.Right" Variant="@DrawerVariant.Persistent">
		<MudIconButton Variant="Variant.Filled" Size="Size.Medium" Icon="@Icons.Material.Filled.Close" OnClick="CloseFileDetails" />
		
		<MudForm Model="@_formModel" @bind-IsValid="@_fileDetailsFormFilledCorrectly" @bind-Errors="@_fileDetailsFormError">
			<MudText T="string" Label="FileName"
					 Required="true" RequiredError="File cannot live without it's name!'">@_formModel.FileName</MudText>

			<MudText T="string" Label="Category">@_formModel.Category</MudText>

			<MudText>Size: @_formModel.Size</MudText>
		</MudForm>   
	</MudDrawer>

	<div>
		<div>
			<InputFile id="fileInput" hidden OnChange="OnFilesListChange" multiple/>
			<MudButton HtmlTag="label" for="fileInput" Variant="Variant.Filled" Size="Size.Small">Add more</MudButton>
		</div>

		<TableView Data="State.Value.Files">
			<TableHeader>
				<MudTh>Name</MudTh>
				<MudTh>Category</MudTh>
				<MudTh>Size</MudTh>
				<MudTh>State</MudTh>
				<MudTh></MudTh>
			</TableHeader>

			<RowTemplate>
				<MudTd DataLabel="Name">@context.FileName</MudTd>
				<MudTd DataLabel="Category">@context.Category</MudTd>
				<MudTd DataLabel="Size">@context.Size</MudTd>
				<MudTd DataLabel="State">@context.State</MudTd>
				<MudTd>
					<MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="() => Details(context)">Details</MudButton>
					<MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="() => Delete(context)">Delete</MudButton>
				</MudTd>
			</RowTemplate>
		</TableView>

		<div>
			<MudButton Variant="Variant.Filled" Size="Size.Small" Disabled="@_cantUploadFiles" OnClick="Upload">Upload</MudButton>
		</div>
	</div>
</MudDrawerContainer>

@code {
	private bool _cantUploadFiles = true;

	private UploadFileDetailsForm _formModel = UploadFileDetailsForm.Empty;
	private bool _openFileDetails;
	private bool _fileDetailsFormFilledCorrectly;
	private string[] _fileDetailsFormError = { };

	protected override void OnAfterRender(bool firstRender)
	{
		_cantUploadFiles = State.Value.Files.Length <= 0;
	}

	private void OnFilesListChange(InputFileChangeEventArgs e)
	{
		if (e.FileCount <= 0) return;

		Dispatcher.Dispatch(new RegisterMultipleFilesUpload(e.GetMultipleFiles()));
	}

	private void Upload()
	{
		var toUpload = State.Value.Files.Where(x => x.State == UploadState.NotScheduled).ToList();
		Dispatcher.Dispatch(new ScheduleFilesUpload(toUpload));
	}

	private void Delete(FileUploadState context)
	{
		Dispatcher.Dispatch(new DeleteFileUpload(context.Id));
	}

	private void Details(FileUploadState context)
	{
		_openFileDetails = true;
		_formModel = new UploadFileDetailsForm()
		{
			Id = context.Id,
			Category = context.Category,
			FileName = context.FileName,
			Size = context.Size
		};
	}

	private void CloseFileDetails()
	{
		_formModel = UploadFileDetailsForm.Empty;
		_openFileDetails = false;
	}
}
