@page "/files_storage"

@using SciMaterials.UI.BWASM.States.FilesStorage
@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<FilesStorageState> State

@inject NavigationManager NavigationManager

<MudText Class="mb-5" Typo="Typo.h3" Align="Align.Start">Files</MudText>

<MudNavLink Class="rounded-lg" Href="files_upload" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.UploadFile">Upload</MudNavLink>
<FilesFilter ItemsPresentationMode="_itemsPresentationMode" OnItemsPresentationModeChanged="ChangeItemsPresentationMode"/>

@switch (_itemsPresentationMode)
{
	case ItemsPresentationMode.Table:
		<TableView Data="State.Value.Files">
			<TableHeader>
				<MudTh></MudTh>
				<MudTh>Name</MudTh>
				<MudTh>Category</MudTh>
				<MudTh>Size</MudTh>
				<MudTh></MudTh>
			</TableHeader>

			<RowTemplate>
				@*@if (true)
				{*@
					<MudTd><MudIcon Icon="@Icons.Material.Filled.FilePresent" /></MudTd>
				@*}
				else
				{
					<MudTd><MudIcon Icon="@Icons.Material.Filled.Folder"/></MudTd>
				}*@

				<MudTd DataLabel="Name">@context.FileName</MudTd>
				<MudTd DataLabel="Category">@context.Category</MudTd>
				<MudTd DataLabel="Size">@context.Size</MudTd>
				<MudTh>
					<MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="() => NavigateToFileDetailsUrl(context)">Edit</MudButton>
					<MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="() => Delete(context)">Delete</MudButton>
				</MudTh>
			</RowTemplate>
		</TableView>
		break;
	@*case ItemsPresentationMode.LargeGrid:
		<FilesGridView Files="State.Value.Files" OnFileSelected="NavigateToFileDetailsUrl"/>
		break;*@
}


@code {
	private string filterValue { get; set; }
    private string sortValue { get; set; }
	private ItemsPresentationMode _itemsPresentationMode;

    protected override async Task OnInitializedAsync()
    {
	    Refresh();
    }

    private void NavigateToFileDetailsUrl(FileStorageState context)
    {
        NavigationManager.NavigateTo($"/filedetails/{context.Id}");
    }

	private void ChangeItemsPresentationMode(ItemsPresentationMode mode)
	{
		_itemsPresentationMode = mode;
	}

	private void Delete(FileStorageState context)
	{
		Dispatcher.Dispatch(new DeleteFile(context.Id));
	}

	private void Refresh()
	{
		Dispatcher.Dispatch(new LoadFiles());
	}
}