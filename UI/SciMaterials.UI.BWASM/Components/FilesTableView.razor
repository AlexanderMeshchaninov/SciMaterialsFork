<style type="text/css">
	.mud-table-head .header-centered th {
		text-align: center;
		font-size: 1.2em;
	}

	.mud-table-foot .bold-text .mud-table-cell {
		font-weight: 500;
	}
</style>

<MudTable Items="@Files" MultiSelection="true" @bind-SelectedItems="SelectedFiles" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true" Bordered="false"
          CustomHeader="true" CustomFooter="true" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered">
	<HeaderContent>
		<MudTHeadRow IsCheckable="true">
			<MudTh></MudTh>
			<MudTh>Name</MudTh>
			<MudTh>Size</MudTh>
			<MudTh></MudTh>
		</MudTHeadRow>
	</HeaderContent>

	<RowTemplate>
		@if (true)
		{
			<MudTd><MudIcon Icon="@Icons.Material.Filled.FilePresent" /></MudTd>
		}
		else
		{
			<MudTd><MudIcon Icon="@Icons.Material.Filled.Folder"/></MudTd>
		}

		<MudTd DataLabel="Name">@($"Name #{context}")</MudTd>
		<MudTd DataLabel="Size">@($"{context} gb")</MudTd>
		<MudTh>
			<MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="() => SelectFile(context)">Edit</MudButton>
			<MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="() => Delete(context)">Delete</MudButton>
		</MudTh>
	</RowTemplate>

	<FooterContent>
		<MudTFootRow IsCheckable="true">
			<MudTd colspan="5">Selected: @SelectedFiles.Count</MudTd>
		</MudTFootRow>
	</FooterContent>

	<PagerContent>
		<MudTablePager />
	</PagerContent>
</MudTable>

@code {
	[Parameter]
	public List<int> Files { get; set; }

	public HashSet<int> SelectedFiles { get; set; } = new();

	[Parameter]
	public EventCallback<int> OnFileSelected { get; set; }
	[Parameter]
	public EventCallback<IReadOnlySet<int>> OnFilesSelected { get; set; }
	[Parameter]
	public EventCallback<int> OnDelete { get; set; }

	private async Task SelectFile(int file)
	{
		if (!OnFileSelected.HasDelegate) throw new InvalidOperationException($"You not subscribe to selection event from {GetType().FullName}");
		await OnFileSelected.InvokeAsync(file);
	}

	private async Task Delete(int file)
	{
		if (!OnDelete.HasDelegate) throw new InvalidOperationException($"You not subscribe to delete event from {GetType().FullName}");
		await OnDelete.InvokeAsync(file);
	}
}
